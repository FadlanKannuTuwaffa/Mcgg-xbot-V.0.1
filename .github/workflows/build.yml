name: Build Signed APK (MCGG-Xbot)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git ccache libffi-dev libssl-dev \
            libsqlite3-dev libjpeg-dev libpng-dev zlib1g-dev openjdk-17-jdk unzip python3-dev \
            libsndfile1 libopenblas-dev wget curl zip

      - name: Prepare Android SDK
        run: |
          set -e
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          # download command-line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          mkdir -p cmdline-tools/latest
          unzip -q cmdline-tools.zip -d cmdline-tools-tmp
          if [ -d cmdline-tools-tmp/cmdline-tools ]; then
            mv cmdline-tools-tmp/cmdline-tools/* cmdline-tools/latest/
          else
            mv cmdline-tools-tmp/* cmdline-tools/latest/
          fi
          rm -rf cmdline-tools.zip cmdline-tools-tmp

          # add PATH for sdkmanager
          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$SDK_ROOT/platform-tools:$PATH"

          # install required SDK components
          yes | sdkmanager --sdk_root="$SDK_ROOT" --licenses
          sdkmanager --sdk_root="$SDK_ROOT" --install \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "build-tools;34.0.0" \
            "build-tools;30.0.3"

          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "$SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/33.0.2" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/30.0.3" >> $GITHUB_PATH

          # debug listing
          echo "Debug build-tools content:"
          ls -R "$SDK_ROOT/build-tools" || true

      - name: Install buildozer & python deps
        run: |
          python -m pip install --upgrade pip
          pip install buildozer==1.5.0 cython==0.29.36

      - name: Decode keystore from secret
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > mcgg-release-key.jks
          chmod 600 mcgg-release-key.jks

      - name: Build signed release APK
        env:
          P4A_RELEASE_KEYSTORE: ${{ github.workspace }}/mcgg-release-key.jks
          P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.KEYSTORE_PASSWORD }}
          P4A_RELEASE_KEYALIAS: ${{ secrets.KEY_ALIAS }}
          P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -e
          export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2:$ANDROID_SDK_ROOT/build-tools/34.0.0:$ANDROID_SDK_ROOT/build-tools/30.0.3:$PATH"

          echo "Debug -> sdkmanager: $(which sdkmanager || echo 'not found')"
          echo "Debug -> aidl: $(which aidl || echo 'not found')"
          echo "Build-tools content:"
          ls -la "$ANDROID_SDK_ROOT/build-tools" || true

          buildozer -v android release

      - name: Upload signed APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcgg-xbot-signed
          path: bin/*.apk
